name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    env:
      # Optional: Map GitHub Secrets to env for tests that need them.
      # Provide these in your repo settings → Secrets and variables → Actions.
      DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_VERTEX_LOCATION: ${{ secrets.GCP_VERTEX_LOCATION }}
      GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}
      GOOGLE_CSE_API_KEY: ${{ secrets.GOOGLE_CSE_API_KEY }}
      GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
      # If you store a service account JSON in secrets.GCP_SA_JSON, we write it below:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/sa.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: (Optional) Load .env.ci into environment
        shell: bash
        run: |
          if [ -f .env.ci ]; then
            echo "Loading .env.ci into GITHUB_ENV"
            # Strip comments/blank lines; export as environment for subsequent steps
            sed -e '/^[[:space:]]*#/d' -e '/^[[:space:]]*$/d' .env.ci >> "$GITHUB_ENV"
          fi

      - name: (Optional) Write GCP service account JSON from secret
        if: ${{ secrets.GCP_SA_JSON != '' }}
        shell: bash
        run: |
          echo "${{ secrets.GCP_SA_JSON }}" > sa.json
          echo "Wrote service account key to $GOOGLE_APPLICATION_CREDENTIALS"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Ruff (report as annotations)
        shell: bash
        run: ruff --format=github .

      - name: Black (check only)
        shell: bash
        run: black --check .

      - name: Mypy
        shell: bash
        run: mypy fibz_bot

      - name: Pytest (with coverage)
        shell: bash
        run: |
          pytest -q --maxfail=1 --disable-warnings --cov=fibz_bot --cov-report=xml --cov-report=term

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: |
            coverage.xml
            .pytest_cache
